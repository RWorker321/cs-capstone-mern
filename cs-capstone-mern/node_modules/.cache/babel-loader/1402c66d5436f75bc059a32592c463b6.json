{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Z\\\\Desktop\\\\csCapstone Final Project\\\\cs-capstone-mern\\\\src\\\\components\\\\sleep-metrics.component.js\";\n// https://github.com/reactchartjs/react-chartjs-2/blob/master/example/src/charts/Line.js\nimport React from 'react';\nimport { Component, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2'; // http://localhost:5000/sleepjournal/id/duration\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SleepMetrics extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lineData: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getSleepDuration();\n  }\n\n  getSleepDuration() {\n    axios.get('http://localhost:5000/sleepjournal/').then(response => {\n      if (response.data.length > 0) {\n        const resData = response.data;\n        let sleepDuration = []; // Hours of sleep\n\n        let sleepDate = []; // Date of sleep\n        // push hours and date of response data to duration and date arrays\n\n        resData.forEach(element => {\n          sleepDuration.push(element.duration);\n          sleepDate.push(element.date);\n        });\n        console.log(sleepDuration);\n        console.log(sleepDate);\n        this.setState({\n          lineData: {\n            labels: sleepDate,\n            // Labels x axis with date of sleep\n            datasets: [{\n              label: 'Sleep Duration',\n              data: sleepDuration,\n              // Labels y axis with duration of sleep\n              fill: true,\n              active: true,\n              cubicInterpolationMode: 'monotone',\n              backgroundColor: 'blue',\n              //backgroundColor: 'rgb(3, 0, 1)',\n              borderColor: 'rgba(255, 99, 132, 0.2)',\n              pointBackgroundColor: 'rgba(1, 1, 1)'\n            }]\n          },\n          options: {\n            title: {\n              display: false\n            },\n            scales: {\n              yAxes: [{\n                ticks: {\n                  beginAtZero: true\n                }\n              }]\n            }\n          }\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  } // Define dataset to be reflected on line graph\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Family Sleep Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"thead-light\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sleep Metrics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(Bar, {\n            data: this.state.lineData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n} //export default SleepMetrics;\n// options= {{\n//   maintainAspectRatio: true,\n//   scales: {\n//     yAxis: [{\n//         ticks: {\n//             beginAtZero:true\n//         }\n//     }]\n// },\n//   responsive: true,\n//   title: {\n//   display: true,\n//   text: 'Sleep Test'\n//   },\n//   legend:{\n//     display: true,\n//     position: 'right'\n//   }\n// }}","map":{"version":3,"sources":["C:/Users/Z/Desktop/csCapstone Final Project/cs-capstone-mern/src/components/sleep-metrics.component.js"],"names":["React","Component","useState","useEffect","axios","Line","SleepMetrics","constructor","props","state","lineData","componentDidMount","getSleepDuration","get","then","response","data","length","resData","sleepDuration","sleepDate","forEach","element","push","duration","date","console","log","setState","labels","datasets","label","fill","active","cubicInterpolationMode","backgroundColor","borderColor","pointBackgroundColor","options","title","display","scales","yAxes","ticks","beginAtZero","catch","error","render"],"mappings":"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","sourcesContent":["// https://github.com/reactchartjs/react-chartjs-2/blob/master/example/src/charts/Line.js\r\nimport React from 'react';\r\nimport { Component, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n// http://localhost:5000/sleepjournal/id/duration\r\n\r\nexport default class SleepMetrics extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      lineData: {},\r\n      }\r\n    }\r\n    \r\n    componentDidMount() {\r\n      this.getSleepDuration();\r\n    }\r\n\r\n  getSleepDuration() {\r\n    axios.get('http://localhost:5000/sleepjournal/')\r\n      .then(response => {\r\n        if (response.data.length > 0) {\r\n          const resData = response.data;\r\n          let sleepDuration = []; // Hours of sleep\r\n          let sleepDate = [];     // Date of sleep\r\n          // push hours and date of response data to duration and date arrays\r\n          resData.forEach(element => {\r\n            sleepDuration.push(element.duration)\r\n            sleepDate.push(element.date)\r\n          });  \r\n          console.log(sleepDuration);\r\n          console.log(sleepDate);\r\n          this.setState({\r\n            lineData: {\r\n              labels: sleepDate, // Labels x axis with date of sleep\r\n              datasets: [\r\n                {\r\n                  label: 'Sleep Duration',\r\n                  data: sleepDuration, // Labels y axis with duration of sleep\r\n                  fill: true,\r\n                  active: true,\r\n                  cubicInterpolationMode: 'monotone',\r\n                  backgroundColor:  'blue',\r\n                  //backgroundColor: 'rgb(3, 0, 1)',\r\n                  borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                  pointBackgroundColor: 'rgba(1, 1, 1)',\r\n\r\n                }]\r\n              },\r\n              options: {\r\n                title: {\r\n                  display: false\r\n                },\r\n                scales: {\r\n                  yAxes: [{\r\n                    ticks: {\r\n                      beginAtZero: true\r\n                    }\r\n                  }]\r\n                }\r\n              }\r\n            })\r\n          }\r\n        })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n\r\n}\r\n\r\n  \r\n// Define dataset to be reflected on line graph\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h1>Family Sleep Metrics</h1>\r\n        <table className=\"table\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              <th>Sleep Metrics</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <Bar\r\n            data={this.state.lineData}\r\n\r\n            />\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n//export default SleepMetrics;\r\n\r\n// options= {{\r\n//   maintainAspectRatio: true,\r\n//   scales: {\r\n//     yAxis: [{\r\n//         ticks: {\r\n//             beginAtZero:true\r\n//         }\r\n//     }]\r\n// },\r\n//   responsive: true,\r\n//   title: {\r\n//   display: true,\r\n//   text: 'Sleep Test'\r\n//   },\r\n//   legend:{\r\n//     display: true,\r\n//     position: 'right'\r\n//   }\r\n// }}"]},"metadata":{},"sourceType":"module"}