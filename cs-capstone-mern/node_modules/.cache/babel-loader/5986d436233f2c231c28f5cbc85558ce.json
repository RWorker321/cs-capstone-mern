{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Z\\\\Desktop\\\\csCapstone Final Project\\\\cs-capstone-mern\\\\src\\\\components\\\\dream-interpreter.components.js\";\n\n/* WiP\r\nThis component will find keywords in dream journal and match those strings with similiar words.\r\nConsider using https://www.datamuse.com/api/\r\n */\nimport React from 'react';\nimport { Component, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DreamInterpreter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      returnedWords: [],\n      rhymingWords: {}\n    };\n    this.getJournalWords();\n    this.getDataMuseWords();\n  }\n\n  getJournalWords() {\n    axios.get('http://localhost:5000/sleepjournal/').then(response => {\n      if (response.data.length > 0) {\n        const resData = response.data;\n        let journalString = []; // Array for storing journal words\n        // push string description to journalString array\n\n        resData.forEach(element => {\n          journalString.push(element.description); //journalString.split(\" ,\")\n\n          journalString.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 36\n          }, this)); // Line breaks for each entry\n        }); // Parse Sub Strings Here\n\n        console.log(journalString);\n        this.setState({\n          returnedWords: [journalString]\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  } // DataMuse Docs\n  // https://www.datamuse.com/api/\n  // Rhymes, Words that sound like, comparable adjectives\n  // rel_jjb adjectives that are often used to describe\n  // Testing api with the word \"blue\"\n\n\n  getDataMuseWords() {\n    axios.get('https://api.datamuse.com/words?rel_jjb=').then(response => {\n      if (response.data.length > 0) {\n        const resData = response.data;\n        let rhymingWords = []; // Array for storing rhyming words\n        // push string description to journalString array\n\n        resData.forEach(element => {\n          rhymingWords.push(element.word); //journalString.split(\" ,\")\n\n          rhymingWords.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 35\n          }, this)); // Line breaks for each entry\n        }); // Parse Sub Strings Here\n\n        console.log(rhymingWords);\n        this.setState({\n          returnedRhymingWords: [rhymingWords]\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  } // onSubmit(e) {\n  //   e.preventDefault();\n  //   const xxx = {\n  //   }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Dream Journal Suggest....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this), this.state.returnedWords, this.state.returnedRhymingWords]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this);\n  }\n\n} //     render() {\n//         return (\n//         <div>\n//         <h1>Your Dream Journal Suggest....</h1>\n//         <div>\n//           <h3>First Review Your Past Dream Journal Entries</h3>\n//         {this.state.returnedWords}\n//         </div>\n//         <div>\n//           <h3>Now that You've Reviewed Your Entries, Input a Word to Find Out the Subjective Meaning</h3>\n//           <form onSubmit={this.onSubmit}>\n//           <label>Dream Word: </label>\n//             <input  type=\"text\" \n//                 required\n//                 className=\"form-control\"\n//                 value={this.state.rhymingWords}\n//                 onChange={this.getDataMuseWords}\n//                 />\n//                 <input type=\"submit\" value=\"Submit Dream Word\" className=\"btn btn-primary\" />\n//           </form>\n//         </div>\n//         <div>\n//         {this.state.rhymingWords}\n//         </div>\n//         </div>\n//         );\n//     }\n// }","map":{"version":3,"sources":["C:/Users/Z/Desktop/csCapstone Final Project/cs-capstone-mern/src/components/dream-interpreter.components.js"],"names":["React","Component","useEffect","useState","axios","DreamInterpreter","constructor","props","state","returnedWords","rhymingWords","getJournalWords","getDataMuseWords","get","then","response","data","length","resData","journalString","forEach","element","push","description","console","log","setState","catch","error","word","returnedRhymingWords","render"],"mappings":"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","sourcesContent":["/* WiP\r\nThis component will find keywords in dream journal and match those strings with similiar words.\r\nConsider using https://www.datamuse.com/api/\r\n */\r\nimport React from 'react';\r\nimport { Component, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class DreamInterpreter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            returnedWords: [],\r\n            rhymingWords: {}\r\n        };\r\n        this.getJournalWords()\r\n        this.getDataMuseWords()\r\n    }\r\n\r\n    getJournalWords() {\r\n        axios.get('http://localhost:5000/sleepjournal/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            const resData = response.data;\r\n            let journalString = []; // Array for storing journal words\r\n            \r\n            // push string description to journalString array\r\n            resData.forEach(element => {\r\n                journalString.push(element.description)\r\n                //journalString.split(\" ,\")\r\n                journalString.push(<br />) // Line breaks for each entry\r\n            });\r\n            // Parse Sub Strings Here\r\n            console.log(journalString);\r\n            this.setState({\r\n                returnedWords: [journalString]\r\n              })\r\n            }\r\n          })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n  }\r\n\r\n  // DataMuse Docs\r\n  // https://www.datamuse.com/api/\r\n  // Rhymes, Words that sound like, comparable adjectives\r\n  // rel_jjb adjectives that are often used to describe\r\n  // Testing api with the word \"blue\"\r\n    getDataMuseWords() {\r\n        axios.get('https://api.datamuse.com/words?rel_jjb=')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            const resData = response.data;\r\n            let rhymingWords = []; // Array for storing rhyming words\r\n            \r\n            // push string description to journalString array\r\n            \r\n            resData.forEach(element => {\r\n                rhymingWords.push(element.word)\r\n                //journalString.split(\" ,\")\r\n                rhymingWords.push(<br />) // Line breaks for each entry\r\n            });\r\n            // Parse Sub Strings Here\r\n            console.log(rhymingWords);\r\n            this.setState({\r\n                returnedRhymingWords: [rhymingWords]\r\n              })\r\n            }\r\n          })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n  }\r\n\r\n  // onSubmit(e) {\r\n  //   e.preventDefault();\r\n\r\n  //   const xxx = {\r\n\r\n  //   }\r\n  // }\r\n\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n    <h1>Your Dream Journal Suggest....</h1>\r\n    {this.state.returnedWords}\r\n    {this.state.returnedRhymingWords}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n//     render() {\r\n//         return (\r\n//         <div>\r\n//         <h1>Your Dream Journal Suggest....</h1>\r\n//         <div>\r\n//           <h3>First Review Your Past Dream Journal Entries</h3>\r\n//         {this.state.returnedWords}\r\n//         </div>\r\n//         <div>\r\n//           <h3>Now that You've Reviewed Your Entries, Input a Word to Find Out the Subjective Meaning</h3>\r\n//           <form onSubmit={this.onSubmit}>\r\n//           <label>Dream Word: </label>\r\n//             <input  type=\"text\" \r\n//                 required\r\n//                 className=\"form-control\"\r\n//                 value={this.state.rhymingWords}\r\n//                 onChange={this.getDataMuseWords}\r\n//                 />\r\n//                 <input type=\"submit\" value=\"Submit Dream Word\" className=\"btn btn-primary\" />\r\n//           </form>\r\n//         </div>\r\n//         <div>\r\n//         {this.state.rhymingWords}\r\n//         </div>\r\n//         </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}