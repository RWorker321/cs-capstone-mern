{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Z\\\\Desktop\\\\csCapstone Final Project\\\\cs-capstone-mern\\\\src\\\\components\\\\dream-interpreter.components.js\";\n\n/* WiP\r\nThis component will find keywords in dream journal and match those strings with similiar words.\r\nConsider using https://www.datamuse.com/api/\r\n */\nimport React from 'react';\nimport { Component, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DreamInterpreter extends Component {\n  // Constructor for sleep journal and DataMuse arrays\n  constructor(props) {\n    super(props);\n    this.state = {\n      returnedWords: [],\n      rhymingWords: {},\n      dreamWord: ''\n    };\n    this.getJournalWords();\n    this.getRhymingWords();\n    this.onChangeDreamWord();\n  } // Returns Sleep Journal Object\n\n\n  getJournalWords() {\n    axios.get('http://localhost:5000/sleepjournal/').then(response => {\n      if (response.data.length > 0) {\n        const resData = response.data;\n        let journalString = []; // Array for storing journal words\n        // push string description to journalString array\n\n        resData.forEach(element => {\n          journalString.push(element.description); //journalString.split(\" ,\")\n\n          journalString.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 36\n          }, this)); // Line breaks for each entry\n        }); // Parse Sub Strings Here\n\n        console.log(journalString);\n        this.setState({\n          returnedWords: [journalString]\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  } // DataMuse Docs\n  // https://www.datamuse.com/api/\n  // Rhymes, Words that sound like, comparable adjectives. Need to determine which api call to make.\n  // rel_jjb adjectives that are often used to describe\n\n\n  getRhymingWords(e) {\n    // Test Word \"clowns\"\n    axios.get('https://api.datamuse.com/words?rel_jjb=clowns') //, User Submitted word will be parameter as query string. \n    .then(response => {\n      if (response.data.length > 0) {\n        const resData = response.data;\n        let rhymingWords = []; // Array for storing rhyming words\n        // push string description to journalString array\n\n        resData.forEach(element => {\n          rhymingWords.push(element.word);\n          rhymingWords.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 35\n          }, this)); // Line breaks for each entry\n        }); // WiP: Parse Sub Strings Here\n\n        console.log(rhymingWords);\n        this.setState({\n          returnedRhymingWords: [rhymingWords]\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  onChangeDreamWord(dreamWord) {\n    this.setState({\n      dreamWord: dreamWord\n    });\n  } // Render/Return JSX for Dream Interpreter\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Dream Journal Suggest....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"First Review Your Past Dream Journal Entries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), this.state.returnedWords]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Now that You've Reviewed Your Entries, Input a Word to Find Out the Subjective Meaning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.dreamWord,\n            onChange: this.onChangeDreamWord\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Work In Progress\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Below Are Adjectives that Descrive Your Dream Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Test Dream Word is \\\"clowns\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), this.state.returnedRhymingWords]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this);\n  }\n\n} // render() {\n//   return (\n//   <div className=\"App\">\n//   <h1>Your Dream Journal Suggest....</h1>\n//   {this.state.returnedWords}\n//   {this.state.returnedRhymingWords}\n//   </div>\n//   );\n// }","map":{"version":3,"sources":["C:/Users/Z/Desktop/csCapstone Final Project/cs-capstone-mern/src/components/dream-interpreter.components.js"],"names":["React","Component","useEffect","useState","axios","DreamInterpreter","constructor","props","state","returnedWords","rhymingWords","dreamWord","getJournalWords","getRhymingWords","onChangeDreamWord","get","then","response","data","length","resData","journalString","forEach","element","push","description","console","log","setState","catch","error","e","word","returnedRhymingWords","render"],"mappings":"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","sourcesContent":["/* WiP\r\nThis component will find keywords in dream journal and match those strings with similiar words.\r\nConsider using https://www.datamuse.com/api/\r\n */\r\nimport React from 'react';\r\nimport { Component, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class DreamInterpreter extends Component {\r\n  // Constructor for sleep journal and DataMuse arrays\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            returnedWords: [],\r\n            rhymingWords: {},\r\n            dreamWord: ''\r\n        };\r\n        this.getJournalWords()\r\n        this.getRhymingWords()\r\n        this.onChangeDreamWord();\r\n    }\r\n    \r\n    // Returns Sleep Journal Object\r\n    getJournalWords() {\r\n        axios.get('http://localhost:5000/sleepjournal/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            const resData = response.data;\r\n            let journalString = []; // Array for storing journal words\r\n            \r\n            // push string description to journalString array\r\n            resData.forEach(element => {\r\n                journalString.push(element.description)\r\n                //journalString.split(\" ,\")\r\n                journalString.push(<br />) // Line breaks for each entry\r\n            });\r\n            // Parse Sub Strings Here\r\n            console.log(journalString);\r\n            this.setState({\r\n                returnedWords: [journalString]\r\n              })\r\n            }\r\n          })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n  }\r\n\r\n  // DataMuse Docs\r\n  // https://www.datamuse.com/api/\r\n  // Rhymes, Words that sound like, comparable adjectives. Need to determine which api call to make.\r\n  // rel_jjb adjectives that are often used to describe\r\n    getRhymingWords(e) {\r\n      // Test Word \"clowns\"\r\n        axios.get('https://api.datamuse.com/words?rel_jjb=clowns') //, User Submitted word will be parameter as query string. \r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            const resData = response.data;\r\n            let rhymingWords = []; // Array for storing rhyming words\r\n            \r\n            // push string description to journalString array\r\n            \r\n            resData.forEach(element => {\r\n                rhymingWords.push(element.word)\r\n                rhymingWords.push(<br />) // Line breaks for each entry\r\n            });\r\n            // WiP: Parse Sub Strings Here\r\n            console.log(rhymingWords);\r\n            this.setState({\r\n                returnedRhymingWords: [rhymingWords]\r\n              })\r\n            }\r\n          })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n  }\r\n\r\n  onChangeDreamWord(dreamWord) {\r\n    this.setState({\r\n      dreamWord: dreamWord\r\n    })\r\n  }\r\n\r\n  // Render/Return JSX for Dream Interpreter\r\n    render() {\r\n        return (\r\n        <div>\r\n          <h1>Your Dream Journal Suggest....</h1>\r\n          <div>\r\n            <h3>First Review Your Past Dream Journal Entries</h3>\r\n          {this.state.returnedWords}\r\n          </div>\r\n          <div>\r\n            <h3>Now that You've Reviewed Your Entries, Input a Word to Find Out the Subjective Meaning</h3>\r\n            <form>\r\n            <input  type=\"text\"\r\n                required\r\n                className=\"form-control\"\r\n                value={this.state.dreamWord}\r\n                onChange={this.onChangeDreamWord}\r\n                />\r\n              <input type=\"submit\" value=\"Work In Progress\" className=\"btn btn-primary\" />\r\n            </form>\r\n          </div>\r\n          <div>\r\n            <h3>Below Are Adjectives that Descrive Your Dream Word</h3>\r\n            <h4>Test Dream Word is \"clowns\"</h4>\r\n            {this.state.returnedRhymingWords}\r\n          </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n// render() {\r\n//   return (\r\n//   <div className=\"App\">\r\n//   <h1>Your Dream Journal Suggest....</h1>\r\n//   {this.state.returnedWords}\r\n//   {this.state.returnedRhymingWords}\r\n//   </div>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}