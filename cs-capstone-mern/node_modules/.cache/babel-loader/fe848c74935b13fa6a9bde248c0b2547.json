{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Z\\\\Desktop\\\\csCapstone Final Project\\\\cs-capstone-mern\\\\src\\\\components\\\\sleep-metrics.component.js\";\n// https://github.com/reactchartjs/react-chartjs-2/blob/master/example/src/charts/Line.js\nimport React, { Component, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2'; // http://localhost:5000/sleepjournal/id/duration\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SleepMetrics extends Component {\n  constructor(props) {\n    super(props);\n    this.onFilterDuration = this.onFilterDuration.bind(this);\n    this.state = {\n      sleepDuration: [],\n      Linedata: {\n        labels: ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n        datasets: [{\n          label: 'Sleep Duration',\n          data: [1, 2, 3, 4],\n          // Edit this with sleep journal duration\n          fill: true,\n          backgroundColor: 'rgb(3, 0, 145)',\n          borderColor: 'rgba(255, 99, 132, 0.2)'\n        }]\n      }\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/sleepjournal/' + this.props.match.params.id).then(response => {\n      this.setState({\n        username: response.data.username,\n        description: response.data.description,\n        duration: response.data.duration,\n        date: new Date(response.data.date)\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n    axios.get('http://localhost:5000/sleepjournal/').then(response => {\n      if (response.data.length > 0) {\n        this.setState({\n          sleepDuration: response.data.map(sleepDur => sleepDur.duration)\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  onFilterDuration(e) {\n    this.state({\n      duration: e.target.value\n    });\n  } // Define dataset to be reflected on line graph\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sleep Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"thead-light\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sleep Metrics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: Linedata,\n            options: {\n              title: {\n                display: true,\n                text: 'Sleep Metrics'\n              },\n              legend: {\n                display: true,\n                position: 'right'\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n} //export default SleepMetrics;","map":{"version":3,"sources":["C:/Users/Z/Desktop/csCapstone Final Project/cs-capstone-mern/src/components/sleep-metrics.component.js"],"names":["React","Component","useEffect","Link","axios","Line","SleepMetrics","constructor","props","onFilterDuration","bind","state","sleepDuration","Linedata","labels","datasets","label","data","fill","backgroundColor","borderColor","componentDidMount","get","match","params","id","then","response","setState","username","description","duration","date","Date","catch","error","console","log","length","map","sleepDur","e","target","value","render","title","display","text","legend","position"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB,C,CAEA;;;AAGA,eAAe,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAClDM,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,EADJ;AAETC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,KAAvB,EAA8B,OAA9B,EAAuC,KAAvC,EAA8C,KAA9C,CADA;AAERC,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,KAAK,EAAE,gBADT;AAEEC,UAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFR;AAEsB;AACpBC,UAAAA,IAAI,EAAE,IAHR;AAIEC,UAAAA,eAAe,EAAE,gBAJnB;AAKEC,UAAAA,WAAW,EAAE;AALf,SADQ;AAFF;AAFD,KAAb;AAeC;;AAGLC,EAAAA,iBAAiB,GAAG;AAClBjB,IAAAA,KAAK,CAACkB,GAAN,CAAU,wCAAsC,KAAKd,KAAL,CAAWe,KAAX,CAAiBC,MAAjB,CAAwBC,EAAxE,EACGC,IADH,CACQC,QAAQ,IAAI;AAChB,WAAKC,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAEF,QAAQ,CAACV,IAAT,CAAcY,QADZ;AAEZC,QAAAA,WAAW,EAAEH,QAAQ,CAACV,IAAT,CAAca,WAFf;AAGZC,QAAAA,QAAQ,EAAEJ,QAAQ,CAACV,IAAT,CAAcc,QAHZ;AAIZC,QAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASN,QAAQ,CAACV,IAAT,CAAce,IAAvB;AAJM,OAAd;AAMD,KARH,EASGE,KATH,CASS,UAAUC,KAAV,EAAiB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAXH;AAaA/B,IAAAA,KAAK,CAACkB,GAAN,CAAU,qCAAV,EACGI,IADH,CACQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACV,IAAT,CAAcqB,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,aAAKV,QAAL,CAAc;AACZhB,UAAAA,aAAa,EAAEe,QAAQ,CAACV,IAAT,CAAcsB,GAAd,CAAkBC,QAAQ,IAAIA,QAAQ,CAACT,QAAvC;AADH,SAAd;AAGD;AACF,KAPH,EAQGG,KARH,CAQUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAVH;AAYD;;AAED1B,EAAAA,gBAAgB,CAACgC,CAAD,EAAI;AACd,SAAK9B,KAAL,CAAW;AACToB,MAAAA,QAAQ,EAAEU,CAAC,CAACC,MAAF,CAASC;AADV,KAAX;AAGD,GAvD+C,CA0DpD;;;AACEC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA,gCACE;AAAO,UAAA,SAAS,EAAC,aAAjB;AAAA,iCACE;AAAA,mCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAA,iCACE,QAAC,IAAD;AACA,YAAA,IAAI,EAAE/B,QADN;AAEA,YAAA,OAAO,EAAE;AACPgC,cAAAA,KAAK,EAAE;AACPC,gBAAAA,OAAO,EAAE,IADF;AAEPC,gBAAAA,IAAI,EAAE;AAFC,eADA;AAKPC,cAAAA,MAAM,EAAC;AACLF,gBAAAA,OAAO,EAAE,IADJ;AAELG,gBAAAA,QAAQ,EAAE;AAFL;AALA;AAFT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2BD;;AAvFiD,C,CA0FpD","sourcesContent":["// https://github.com/reactchartjs/react-chartjs-2/blob/master/example/src/charts/Line.js\r\nimport React, { Component, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n// http://localhost:5000/sleepjournal/id/duration\r\n\r\n\r\nexport default class SleepMetrics extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.onFilterDuration = this.onFilterDuration.bind(this);\r\n    \r\n    this.state = {\r\n      sleepDuration: [],\r\n        Linedata: {\r\n          labels: ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\r\n          datasets: [\r\n            {\r\n              label: 'Sleep Duration',\r\n              data: [1, 2, 3, 4], // Edit this with sleep journal duration\r\n              fill: true,\r\n              backgroundColor: 'rgb(3, 0, 145)',\r\n              borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n          ],\r\n        }\r\n      }\r\n    };\r\n    \r\n\r\ncomponentDidMount() {\r\n  axios.get('http://localhost:5000/sleepjournal/'+this.props.match.params.id)\r\n    .then(response => {\r\n      this.setState({\r\n        username: response.data.username,\r\n        description: response.data.description,\r\n        duration: response.data.duration,\r\n        date: new Date(response.data.date)\r\n      })   \r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    })\r\n\r\n  axios.get('http://localhost:5000/sleepjournal/')\r\n    .then(response => {\r\n      if (response.data.length > 0) {\r\n        this.setState({\r\n          sleepDuration: response.data.map(sleepDur => sleepDur.duration),\r\n        })\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    })\r\n\r\n}\r\n\r\nonFilterDuration(e) {\r\n      this.state({\r\n        duration: e.target.value\r\n      })\r\n    }\r\n\r\n\r\n// Define dataset to be reflected on line graph\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Sleep Metrics</h1>\r\n        <table className=\"table\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              <th>Sleep Metrics</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <Line\r\n            data={Linedata}\r\n            options={{\r\n              title: {\r\n              display: true,\r\n              text: 'Sleep Metrics'\r\n              },\r\n              legend:{\r\n                display: true,\r\n                position: 'right'\r\n              }\r\n            }}\r\n            />\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//export default SleepMetrics;\r\n\r\n"]},"metadata":{},"sourceType":"module"}