{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Z\\\\Desktop\\\\csCapstone Final Project\\\\cs-capstone-mern\\\\src\\\\components\\\\dream-interpreter.components.js\";\n\n/* WiP\r\nThis component will find keywords in dream journal and match those strings with similiar words.\r\nConsider using https://www.datamuse.com/api/\r\n */\nimport React from 'react';\nimport { Component, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DreamInterpreter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      returnedWords: [],\n      rhymingWords: {}\n    };\n    this.getJournalWords();\n    this.getWords();\n    this.onSubmit();\n  }\n\n  getJournalWords() {\n    axios.get('http://localhost:5000/sleepjournal/').then(response => {\n      if (response.data.length > 0) {\n        const resData = response.data;\n        let journalString = []; // Array for storing journal words\n        // push string description to journalString array\n\n        resData.forEach(element => {\n          journalString.push(element.description); //journalString.split(\" ,\")\n\n          journalString.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 36\n          }, this)); // Line breaks for each entry\n        }); // Parse Sub Strings Here\n\n        console.log(journalString);\n        this.setState({\n          returnedWords: [journalString]\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  } // DataMuse Docs\n  // https://www.datamuse.com/api/\n  // Rhymes, Words that sound like, comparable adjectives\n  // rel_jjb adjectives that are often used to describe\n  // Testing api with the word \"blue\"\n\n\n  getWords(e) {\n    axios.get('https://api.datamuse.com/words?rel_jjb=blue', e).then(response => {\n      if (response.data.length > 0) {\n        const resData = response.data;\n        let rhymingWords = []; // Array for storing rhyming words\n        // push string description to journalString array\n\n        resData.forEach(element => {\n          rhymingWords.push(element.word); //journalString.split(\" ,\")\n\n          rhymingWords.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 35\n          }, this)); // Line breaks for each entry\n        }); // Parse Sub Strings Here\n\n        console.log(rhymingWords);\n        this.setState({\n          returnedRhymingWords: [rhymingWords]\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const selectedWord = {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Dream Journal Suggest....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Review Your Journal Entries. Which Word Sounds Strange?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), this.state.returnedWords, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            className: \"form-control\",\n            value: this.state.submittedWord,\n            onChange: this.getWords\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), this.state.returnedRhymingWords]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Z/Desktop/csCapstone Final Project/cs-capstone-mern/src/components/dream-interpreter.components.js"],"names":["React","Component","useEffect","useState","axios","DreamInterpreter","constructor","props","state","returnedWords","rhymingWords","getJournalWords","getWords","onSubmit","get","then","response","data","length","resData","journalString","forEach","element","push","description","console","log","setState","catch","error","e","word","returnedRhymingWords","preventDefault","selectedWord","render","submittedWord"],"mappings":"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","sourcesContent":["/* WiP\r\nThis component will find keywords in dream journal and match those strings with similiar words.\r\nConsider using https://www.datamuse.com/api/\r\n */\r\nimport React from 'react';\r\nimport { Component, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class DreamInterpreter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            returnedWords: [],\r\n            rhymingWords: {}\r\n        };\r\n        this.getJournalWords()\r\n        this.getWords()\r\n        this.onSubmit()\r\n    }\r\n\r\n    getJournalWords() {\r\n        axios.get('http://localhost:5000/sleepjournal/')\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            const resData = response.data;\r\n            let journalString = []; // Array for storing journal words\r\n            \r\n            // push string description to journalString array\r\n            resData.forEach(element => {\r\n                journalString.push(element.description)\r\n                //journalString.split(\" ,\")\r\n                journalString.push(<br />) // Line breaks for each entry\r\n            });\r\n            // Parse Sub Strings Here\r\n            console.log(journalString);\r\n            this.setState({\r\n                returnedWords: [journalString]\r\n              })\r\n            }\r\n          })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n  }\r\n\r\n  // DataMuse Docs\r\n  // https://www.datamuse.com/api/\r\n  // Rhymes, Words that sound like, comparable adjectives\r\n  // rel_jjb adjectives that are often used to describe\r\n  // Testing api with the word \"blue\"\r\n    getWords(e) {\r\n        axios.get('https://api.datamuse.com/words?rel_jjb=blue', e)\r\n        .then(response => {\r\n          if (response.data.length > 0) {\r\n            const resData = response.data;\r\n            let rhymingWords = []; // Array for storing rhyming words\r\n            \r\n            // push string description to journalString array\r\n            \r\n            resData.forEach(element => {\r\n                rhymingWords.push(element.word)\r\n                //journalString.split(\" ,\")\r\n                rhymingWords.push(<br />) // Line breaks for each entry\r\n            });\r\n            // Parse Sub Strings Here\r\n            console.log(rhymingWords);\r\n            this.setState({\r\n                returnedRhymingWords: [rhymingWords]\r\n              })\r\n            }\r\n          })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        })\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const selectedWord = {\r\n\r\n    }\r\n  }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n        <h1>Your Dream Journal Suggest....</h1>\r\n          <h3>Review Your Journal Entries. Which Word Sounds Strange?</h3>\r\n        {this.state.returnedWords}\r\n          <form onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\">\r\n            <input type=\"text\"\r\n              required\r\n              className=\"form-control\"\r\n              value={this.state.submittedWord}\r\n              onChange={this.getWords}\r\n              />\r\n              \r\n        </div>\r\n        </form>\r\n        {this.state.returnedRhymingWords}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}